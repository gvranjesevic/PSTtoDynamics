PST-to-Dynamics 365 – Remaining Issues & Technical-Debt Report
==================================================================
Generated: December 2024

I. EXECUTIVE SUMMARY
===================
The application now runs, 46/48 tests pass, and no secrets remain in tracked source.
However several areas still need attention before a polished 1.1 release:
- Repository hygiene (obsolete code, huge artifacts)
- Documentation rot (README still describes deleted analyzers)
- CI/packaging automation and code-signing are missing
- Blanket except Exception patterns remain >150×
- No LICENSE file, proprietary Aspose dependency not documented
- Performance hard-limits (SQLite PRAGMAs, memory use)
- Skipped tests rely on Keyring mock; threads not all shut down cleanly

II. DETAILED FINDINGS
=====================

A. Security
-----------
✅ Hard-coded password was fully removed
❗ No secret-scanning hook / GitHub Secret Scanning configuration
❗ Installer & EXE are still unsigned – SmartScreen warnings inevitable
❗ Old obsolete/ scripts import pypff & log verbose paths; keep out of distributed builds

B. Tests & QA
-------------
• Current test suite: 48 collected – 46 passed, 2 skipped
  – Both skipped tests cover Keyring integration; rewrite mocks so they run
• No GUI screenshot / interaction tests; smoke test only exercised Qt logic
• No integration tests that drive PyInstaller binary

C. Runtime & Robustness
-----------------------
• Broad except Exception as e (≈120 occurrences in active code) still swallow
  stack-traces (see sync_engine.py, pst_reader.py, smart_optimizer.py, …)
• Background QThreads (e.g. SyncEngine workers) aren't always given .quit() /
  .wait() in GUI close path – potential leak
• SQLite opened in default DELETE journal-mode; enable WAL + PRAGMA 
  synchronous = NORMAL for speed & crash-safety
• predictive_analytics.py loads entire DataFrames into RAM; for >3 GB PST that
  will exhaust memory – implement chunked processing

D. Code-Quality & Maintainability
---------------------------------
• obsolete/ and legacy Phase-1 analyzers (≈700 KB) still in main branch – they
  confuse newcomers and inflate repo history
• README still markets pst_analyzer*.py; file-tree diagram obsolete
• Dozens of inline pass # TODO logging placeholders
• No type-checking (mypy), no formatter (black), no lint (flake8)

E. Build, Packaging & CI
------------------------
• No .github/workflows/… – tests aren't enforced on pull-requests
• build_and_package.ps1 hard-codes Windows; no Linux/macOS path
• Installer lacks version-stamp, upgrade/uninstall scripts, EULA display
• No automatic checksum / release-asset upload

F. Licensing & Compliance
-------------------------
• Project ships Aspose.Email (proprietary) but repository has no LICENSE file
  nor notice – risk for open-source publication
• Third-party license copies (Qt, Pandas, etc.) not bundled with installer

G. Documentation
----------------
• User-manual exists but screenshots / gif demos missing
• CHANGELOG stopped at v1.0.0
• CONTRIBUTING.md, CODE_OF_CONDUCT.md absent

III. PRIORITIZED RECOMMENDATIONS
================================

CRITICAL / BLOCKING
-------------------
1. Add GitHub Actions workflow: lint → pytest → PyInstaller → NSIS → upload artifact
2. Replace remaining blanket except Exception with typed exceptions & re-raise
3. Create LICENSE (MIT / Apache-2.0) and add third-party license appendix
4. Sign executable + installer (EV certificate or MS Store)
5. Scrub or move obsolete/ directory to a tagged legacy branch

HIGH PRIORITY
-------------
6. Rewrite Keyring tests → make all 48 tests pass on CI
7. Update README, architecture diagram, sample commands
8. Add secret-scanner (GitHub Advanced Security or truffleHog) pre-commit hook

MEDIUM PRIORITY
---------------
9. Introduce mypy, black, flake8 with a pre-commit config
10. Enable WAL & performance PRAGMAs in SQLite; profile memory hotspots
11. Add thread-stop hooks (QThread.quit(); wait) for all background workers

LOW / NICE-TO-HAVE
------------------
12. Telemetry endpoint (currently stub)
13. Hi-DPI icon set, dark-mode splash
14. End-to-end test that runs packaged EXE inside GitHub Actions windows-latest

IV. NEXT-STEP CHECKLIST
=======================
[ ] Create .github/workflows/ci.yml
[ ] Remove / archive obsolete/ dir (git filter-repo if history purge needed)
[ ] Insert MIT LICENSE + THIRD_PARTY_NOTICES.txt
[ ] Refactor 120+ except Exception blocks
[ ] Rewrite Keyring tests → un-skip
[ ] README cleanup – delete analyzer references
[ ] Add CHANGELOG.md entry for 1.0.1 Hardening release
[ ] Sign installer, add hash to release notes

CONCLUSION
==========
No other critical flaws were found; addressing the list above will move the
project from "production-ready but rough edges" to a maintainable, auditable,
enterprise-grade product. 