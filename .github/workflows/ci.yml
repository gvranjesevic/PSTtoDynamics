name: CI/CD Pipeline

on:
  push:
    branches: [ master, main, develop ]
  pull_request:
    branches: [ master, main ]

jobs:
  lint-and-test:
    runs-on: windows-latest
    strategy:
      matrix:
        python-version: [3.8, 3.9, '3.10', '3.11']

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~\AppData\Local\pip\Cache
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements_gui.txt
        pip install pytest pytest-cov flake8 black mypy

    - name: Lint with flake8
      run: |
        # Stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings. GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Check code formatting with black
      run: |
        black --check --diff .

    - name: Type checking with mypy
      run: |
        mypy . --ignore-missing-imports --no-strict-optional
      continue-on-error: true  # Allow to fail for now

    - name: Run tests with pytest
      run: |
        pytest tests/ -v --cov=. --cov-report=xml --cov-report=html
      env:
        # Mock environment variables for testing
        DYNAMICS_CLIENT_ID: test_client_id
        DYNAMICS_CLIENT_SECRET: test_client_secret
        DYNAMICS_TENANT_ID: test_tenant_id
        DYNAMICS_RESOURCE_URL: https://test.crm.dynamics.com

    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  security-scan:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install security tools
      run: |
        pip install detect-secrets pip-audit

    - name: Run secret scanning
      run: |
        detect-secrets scan --baseline .secrets.baseline --fail-on-unaudited-potential-secrets

    - name: Run dependency vulnerability scanning
      run: |
        pip-audit --format=json --output=pip-audit-results.json || true

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

    - name: Upload security scan results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-scan-results
        path: |
          trivy-results.sarif
          pip-audit-results.json

  build-and-package:
    needs: [lint-and-test, security-scan]
    runs-on: windows-latest
    if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main'

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements_gui.txt
        pip install pyinstaller

    - name: Build with PyInstaller
      run: |
        pyinstaller main_window.spec

    - name: Create installer with NSIS
      run: |
        # Install NSIS
        choco install nsis -y
        # Build installer
        makensis installer.nsi

    - name: Calculate checksums
      run: |
        Get-FileHash -Path "dist\*.exe" -Algorithm SHA256 | Format-Table -AutoSize > checksums.txt
        Get-FileHash -Path "*.exe" -Algorithm SHA256 | Format-Table -AutoSize >> checksums.txt

    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: pst-to-dynamics-${{ github.sha }}
        path: |
          dist/
          *.exe
          checksums.txt

  integration-test:
    needs: [build-and-package]
    runs-on: windows-latest
    if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main'

    steps:
    - uses: actions/checkout@v4

    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: pst-to-dynamics-${{ github.sha }}

    - name: Run integration test on packaged executable
      run: |
        # Test that the executable starts and shows help
        $exe = Get-ChildItem -Path "dist" -Filter "*.exe" | Select-Object -First 1
        if ($exe) {
          Write-Host "Testing executable: $($exe.FullName)"
          # Run with --help flag and timeout after 30 seconds
          $process = Start-Process -FilePath $exe.FullName -ArgumentList "--help" -PassThru -NoNewWindow
          $timeout = 30
          if ($process.WaitForExit($timeout * 1000)) {
            Write-Host "✅ Executable test passed"
          } else {
            Write-Host "⚠️ Executable test timed out"
            $process.Kill()
          }
        } else {
          Write-Host "❌ No executable found for testing"
          exit 1
        }

  create-release:
    needs: [integration-test]
    runs-on: windows-latest
    if: startsWith(github.ref, 'refs/tags/v')

    steps:
    - uses: actions/checkout@v4

    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: pst-to-dynamics-${{ github.sha }}

    - name: Create Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        body: |
          ## Changes in this Release
          - See CHANGELOG.md for detailed changes
          
          ## Installation
          1. Download the installer (.exe file)
          2. Run as administrator
          3. Follow the installation wizard
          
          ## Checksums
          See checksums.txt for file verification
        draft: false
        prerelease: false

    - name: Upload Release Assets
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./PSTtoDynamics-Setup.exe
        asset_name: PSTtoDynamics-Setup.exe
        asset_content_type: application/octet-stream 